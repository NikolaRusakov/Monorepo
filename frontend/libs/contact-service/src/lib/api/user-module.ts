/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ContactService.ApiService | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  User
} from '../model';

import {
  HttpResponse,
  delay,
  http
} from 'msw';




interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class UserModuleService {
  private readonly http = inject(HttpClient);
 getApiUsers<TData = null>( options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getApiUsers<TData = null>( options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getApiUsers<TData = null>( options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getApiUsers<TData = null>(
     options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/users`,options
    );
  }
 postApiUsers<TData = null>(user: User, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 postApiUsers<TData = null>(user: User, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 postApiUsers<TData = null>(user: User, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  postApiUsers<TData = null>(
    user: User, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `/api/users`,
      user,options
    );
  }
 getApiUsersId<TData = null>(id: number, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getApiUsersId<TData = null>(id: number, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getApiUsersId<TData = null>(id: number, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getApiUsersId<TData = null>(
    id: number, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/users/${id}`,options
    );
  }
};

export type GetApiUsersClientResult = never;
export type PostApiUsersClientResult = never;
export type GetApiUsersIdClientResult = never;



export const getGetApiUsersMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<null> | null)) => {
  return http.get('*/api/users', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostApiUsersMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<null> | null)) => {
  return http.post('*/api/users', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiUsersIdMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<null> | null)) => {
  return http.get('*/api/users/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getUserModuleMock = () => [
  getGetApiUsersMockHandler(),
  getPostApiUsersMockHandler(),
  getGetApiUsersIdMockHandler()]
