/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ContactService.ApiService | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  WeatherForecast
} from '../model';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';




interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class WeatherForecastService {
  private readonly http = inject(HttpClient);
 getWeatherForecast<TData = WeatherForecast[]>( options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getWeatherForecast<TData = WeatherForecast[]>( options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getWeatherForecast<TData = WeatherForecast[]>( options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getWeatherForecast<TData = WeatherForecast[]>(
     options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/WeatherForecast`,options
    );
  }
};

export type GetWeatherForecastClientResult = NonNullable<WeatherForecast[]>;


export const getGetWeatherForecastResponseMock = (): WeatherForecast[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({date: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), temperatureC: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), temperatureF: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), summary: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined])})))


export const getGetWeatherForecastMockHandler = (overrideResponse?: WeatherForecast[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<WeatherForecast[]> | WeatherForecast[])) => {
  return http.get('*/WeatherForecast', async (info) => {await delay(1000);
  
    return new HttpResponse(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetWeatherForecastResponseMock(),
      { status: 200,
        headers: { 'Content-Type': 'text/plain' }
      })
  })
}
export const getWeatherForecastMock = () => [
  getGetWeatherForecastMockHandler()]
