/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ContactService.ApiService | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  CreateVCardRequest,
  SearchContactsParams,
  UpdateVCardRequest
} from '../model';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  VCardDto
} from '../model';
import { DeepNonNullable } from '../monkey-patch-orval';




interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class ContactsService {
  private readonly http = inject(HttpClient);
/**
 * @summary Get all contacts
 */
 getAllContacts<TData = VCardDto[]>( options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getAllContacts<TData = VCardDto[]>( options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getAllContacts<TData = VCardDto[]>( options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getAllContacts<TData = VCardDto[]>(
     options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/contacts`,options
    );
  }
/**
 * @summary Create new contact
 */
 createContact<TData = VCardDto>(createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 createContact<TData = VCardDto>(createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 createContact<TData = VCardDto>(createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  createContact<TData = VCardDto>(
    createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `/api/contacts`,
      createVCardRequest,options
    );
  }
/**
 * @summary Get contact by ID
 */
 getContactById<TData = VCardDto>(id: string, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getContactById<TData = VCardDto>(id: string, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getContactById<TData = VCardDto>(id: string, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getContactById<TData = VCardDto>(
    id: string, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/contacts/${id}`,options
    );
  }
/**
 * @summary Update contact
 */
 updateContact<TData = VCardDto>(id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 updateContact<TData = VCardDto>(id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 updateContact<TData = VCardDto>(id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  updateContact<TData = VCardDto>(
    id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.put<TData>(
      `/api/contacts/${id}`,
      updateVCardRequest,options
    );
  }
/**
 * @summary Delete contact
 */
 deleteContact<TData = null>(id: string, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 deleteContact<TData = null>(id: string, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 deleteContact<TData = null>(id: string, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  deleteContact<TData = null>(
    id: string, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.delete<TData>(
      `/api/contacts/${id}`,options
    );
  }
/**
 * @summary Search contacts
 */
 searchContacts<TData = VCardDto[]>(params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 searchContacts<TData = VCardDto[]>(params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 searchContacts<TData = VCardDto[]>(params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  searchContacts<TData = VCardDto[]>(
    params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/contacts/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
};

export type GetAllContactsClientResult = NonNullable<VCardDto[]>;
export type CreateContactClientResult = NonNullable<VCardDto>;
export type GetContactByIdClientResult = NonNullable<VCardDto>;
export type UpdateContactClientResult = NonNullable<VCardDto>;
export type DeleteContactClientResult = never;
export type SearchContactsClientResult = NonNullable<VCardDto[]>;


export const getGetAllContactsResponseMock = (): VCardDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}})))

export const getCreateContactResponseMock = (overrideResponse: Partial< VCardDto > = {}): VCardDto => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, ...overrideResponse})

export const getGetContactByIdResponseMock = (overrideResponse: Partial< VCardDto > = {}): VCardDto => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, ...overrideResponse})

export const getUpdateContactResponseMock = (overrideResponse: Partial< VCardDto > = {}): VCardDto => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, ...overrideResponse})

export const getSearchContactsResponseMock = (): VCardDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}})))


export const getGetAllContactsMockHandler = (overrideResponse?: VCardDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VCardDto[]> | VCardDto[])) => {
  return http.get('*/api/contacts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllContactsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateContactMockHandler = (overrideResponse?: VCardDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VCardDto> | VCardDto)) => {
  return http.post('*/api/contacts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateContactResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetContactByIdMockHandler = (overrideResponse?: VCardDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VCardDto> | VCardDto)) => {
  return http.get('*/api/contacts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetContactByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateContactMockHandler = (overrideResponse?: VCardDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<VCardDto> | VCardDto)) => {
  return http.put('*/api/contacts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateContactResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteContactMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/api/contacts/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getSearchContactsMockHandler = (overrideResponse?: VCardDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VCardDto[]> | VCardDto[])) => {
  return http.get('*/api/contacts/search', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getSearchContactsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getContactsMock = () => [
  getGetAllContactsMockHandler(),
  getCreateContactMockHandler(),
  getGetContactByIdMockHandler(),
  getUpdateContactMockHandler(),
  getDeleteContactMockHandler(),
  getSearchContactsMockHandler()]
