/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ContactService.ApiService | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable,
  inject
} from '@angular/core';

import type {
  DeepNonNullable
} from '@orval/core/src/utils/deep-non-nullable';

import {
  Observable
} from 'rxjs';

import type {
  CreateVCardRequest,
  SearchContactsParams,
  UpdateVCardRequest,
  VCardDto
} from '../../model';



interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
        | HttpParams
        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: {includeHeaders?: string[]} | boolean;
  timeout?: number;
}



@Injectable({ providedIn: 'root' })
export class ContactsService {
  private readonly http = inject(HttpClient);
/**
 * @summary Get all contacts
 */
 getAllContacts<TData = VCardDto[]>( options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getAllContacts<TData = VCardDto[]>( options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getAllContacts<TData = VCardDto[]>( options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getAllContacts<TData = VCardDto[]>(
     options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/contacts`,options
    );
  }
/**
 * @summary Create new contact
 */
 createContact<TData = VCardDto>(createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 createContact<TData = VCardDto>(createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 createContact<TData = VCardDto>(createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  createContact<TData = VCardDto>(
    createVCardRequest: CreateVCardRequest, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.post<TData>(
      `/api/contacts`,
      createVCardRequest,options
    );
  }
/**
 * @summary Get contact by ID
 */
 getContactById<TData = VCardDto>(id: string, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 getContactById<TData = VCardDto>(id: string, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 getContactById<TData = VCardDto>(id: string, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  getContactById<TData = VCardDto>(
    id: string, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/contacts/${id}`,options
    );
  }
/**
 * @summary Update contact
 */
 updateContact<TData = VCardDto>(id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 updateContact<TData = VCardDto>(id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 updateContact<TData = VCardDto>(id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  updateContact<TData = VCardDto>(
    id: string,
    updateVCardRequest: UpdateVCardRequest, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.put<TData>(
      `/api/contacts/${id}`,
      updateVCardRequest,options
    );
  }
/**
 * @summary Delete contact
 */
 deleteContact<TData = null>(id: string, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 deleteContact<TData = null>(id: string, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 deleteContact<TData = null>(id: string, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  deleteContact<TData = null>(
    id: string, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.delete<TData>(
      `/api/contacts/${id}`,options
    );
  }
/**
 * @summary Search contacts
 */
 searchContacts<TData = VCardDto[]>(params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
 searchContacts<TData = VCardDto[]>(params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe: 'events' }): Observable<HttpEvent<TData>>;
 searchContacts<TData = VCardDto[]>(params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe: 'response' }): Observable<AngularHttpResponse<TData>>;
  searchContacts<TData = VCardDto[]>(
    params?: DeepNonNullable<SearchContactsParams>, options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(
      `/api/contacts/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
};

export type GetAllContactsClientResult = NonNullable<VCardDto[]>;
export type CreateContactClientResult = NonNullable<VCardDto>;
export type GetContactByIdClientResult = NonNullable<VCardDto>;
export type UpdateContactClientResult = NonNullable<VCardDto>;
export type DeleteContactClientResult = never;
export type SearchContactsClientResult = NonNullable<VCardDto[]>;
