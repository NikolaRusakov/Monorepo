/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ContactService.ApiService | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  VCardDto
} from '.././model';


export const getGetAllContactsResponseMock = (): VCardDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}})))

export const getCreateContactResponseMock = (overrideResponse: Partial< VCardDto > = {}): VCardDto => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, ...overrideResponse})

export const getGetContactByIdResponseMock = (overrideResponse: Partial< VCardDto > = {}): VCardDto => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, ...overrideResponse})

export const getUpdateContactResponseMock = (overrideResponse: Partial< VCardDto > = {}): VCardDto => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, ...overrideResponse})

export const getSearchContactsResponseMock = (): VCardDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), language: {value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, organization: {name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, address: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), poBox: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), extendedAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), streetAddress: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), locality: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), region: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), postalCode: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, telephones: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), null]), value: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), type: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), preference: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), extension: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])})), email: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, geography: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), latitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), longitude: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null])}, publicKey: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), valueType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), uri: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}, timezone: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), url: {type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), address: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null])}})))


export const getGetAllContactsMockHandler = (overrideResponse?: VCardDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VCardDto[]> | VCardDto[])) => {
  return http.get('*/api/contacts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetAllContactsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateContactMockHandler = (overrideResponse?: VCardDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VCardDto> | VCardDto)) => {
  return http.post('*/api/contacts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCreateContactResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetContactByIdMockHandler = (overrideResponse?: VCardDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VCardDto> | VCardDto)) => {
  return http.get('*/api/contacts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetContactByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateContactMockHandler = (overrideResponse?: VCardDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<VCardDto> | VCardDto)) => {
  return http.put('*/api/contacts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUpdateContactResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteContactMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/api/contacts/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getSearchContactsMockHandler = (overrideResponse?: VCardDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<VCardDto[]> | VCardDto[])) => {
  return http.get('*/api/contacts/search', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getSearchContactsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getContactsMock = () => [
  getGetAllContactsMockHandler(),
  getCreateContactMockHandler(),
  getGetContactByIdMockHandler(),
  getUpdateContactMockHandler(),
  getDeleteContactMockHandler(),
  getSearchContactsMockHandler()]
